/*global define */
define("go", ["locationHandler", "templatedTextStrategy", "contentRetriever", "result"], function(locationHandler, textStrategy, contentRetriever, result) {
  "use strict";

  var regex = /^go\s*\(\s*(true|false)\s*,\s*"([^"]+)"(?:\s*,\s*(.*))?\s*\)$/i;
  var queryRegex = /[a-z]+\(.*?\)(?=(?:\s*,\s*)|)/gi;
  var currWin = window;

  function setWindow(win) {
    currWin = win;
    contentRetriever.setWindow(win);
  }

  // Get all values
  function getValues(jq, queries) {
    var i = 0, values = [], query;
    if(!queries) {
      return values;
    }
    for(; i < queries.length; i += 1) {
      query = queries[i];
      if(typeof query === "undefined") {
        continue;
      }
      values.push(contentRetriever.getContent(jq, query));
    }
    return values;
  }

  function getItemSafely (matches, position) {
    return matches && matches.length > position ? matches[position] : "";
  }

  // Perform the goToUrl operation (go). Force the current page to go do a different URL.
  function go (jq, isNewWindow, url, queries) {
    var values = [];
    // get values from strategies
    if(queries && queries.length) {
      values = getValues(jq, queries);
    }
    if(!textStrategy) {
      throw {message: "Invalid text strategy. Something is wrong!"};
    }
    url = textStrategy.get(url, values);
    return locationHandler.change(false, currWin, url);
  }

  function handleGo (jq, statement) {
    var success = false,
        matches = regex.exec(statement),
        isNewWindow = false,
        queries,
        url;
    if(!matches) {
      return result.NOT_HANDLED;
    }
    isNewWindow = getItemSafely(matches, 1) === "true";
    url = getItemSafely(matches, 2);
    queries = getItemSafely(matches, 3);
    if(queries) {
      queries = queries.match(queryRegex);
    }
    success = go(jq, isNewWindow, url, queries);
    return success ? result.HANDLED : result.NOT_HANDLED;
  }

  function usage () {
    return 'Usage: go("templated-url", "query1", "query2",...,"queryN"); Go to a url that is generated by inserting the result of query 1..N.';
  }

  return {
    handle: handleGo,
    execute: go,
    toString: usage,
    setWindow: setWindow /* Allows for replacing window for testing */
  };
});
